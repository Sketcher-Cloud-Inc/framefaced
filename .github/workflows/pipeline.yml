name: Pipeline

on: [ push, pull_request ]

jobs:
  tests:
    name: Running Tests (Endpoints & Providers)
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Download pipeline environment variables
        run: curl -o ./.env https://gist.githubusercontent.com/SimonRTC/6676d69f8cdc16608f7670b9b47448d1/raw/c640539531697c0f45e73fb5c42bb39b56d0ffd8/gistfile1.txt

      - name: Installation of PHP and its required extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: bcmath, calendar, Core, ctype, curl, date, dom, filter, hash, iconv, json, libxml, mbstring, mysqli, mysqlnd, openssl, pcre, PDO, pdo_mysql, Phar, Reflection, SimpleXML, SPL, standard, tokenizer, xml, xmlreader, xmlwriter, zip, zlib

      - name: Install composer dependencies
        uses: php-actions/composer@v6
        with:
          dev: yes
          version: 2
          php_version: 8.0

      - name: Update permissions for runner
        run: sudo chmod -R 777 ./

      - name: Create required databases
        run: |
          sudo /etc/init.d/mysql start
          ./bin/scripts/databases/initializing.sh

      - name: Initializing sample databases
        run: |
          ./bin/console databases --falsifications --CrashOnFailure
          ./bin/console databases --import --CrashOnFailure

      - name: Launch of tests on Providers and Endpoints (Apps)
        run: ./bin/console tests --debug --CrashOnFailure

      - name: Archive databases falsifications
        uses: actions/upload-artifact@v2
        with:
          name: databases
          path: src/Tests/SQL/*

  build:
    name: Build Application
    needs: [tests]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Download databases falsifications
        uses: actions/download-artifact@v2
        with:
          name: databases
          path: src/Tests/SQL/

      - name: Download pipeline environment variables
        run: curl -o ./.env https://gist.githubusercontent.com/SimonRTC/6676d69f8cdc16608f7670b9b47448d1/raw/c640539531697c0f45e73fb5c42bb39b56d0ffd8/gistfile1.txt

      - name: Installation of PHP and its required extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: bcmath, calendar, Core, ctype, curl, date, dom, filter, hash, iconv, json, libxml, mbstring, mysqli, mysqlnd, openssl, pcre, PDO, pdo_mysql, Phar, Reflection, SimpleXML, SPL, standard, tokenizer, xml, xmlreader, xmlwriter, zip, zlib

      - name: Install composer dependencies
        uses: php-actions/composer@v6
        with:
          dev: no
          version: 2
          php_version: 8.0

      - name: Update permissions for runner
        run: sudo chmod -R 777 ./

      - name: Create required databases
        run: |
          sudo /etc/init.d/mysql start
          ./bin/scripts/databases/initializing.sh

      - name: Initializing sample databases
        run: ./bin/console databases --import --CrashOnFailure

      - name: Archive the builded framework
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: |
            public/
            vendor/
            src/
            !src/Tests/
            vendor/
            composer.json
            composer.lock

            build:

    name: Deploy Application
    needs: [tests, build]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Download builded application
        uses: actions/download-artifact@v2
        with:
          name: build
          path: ./

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          push: true
          tags: |
            docker.pkg.github.com/${{ github.repository }}/octo-image:${{ github.sha }}